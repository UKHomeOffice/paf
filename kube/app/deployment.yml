---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{ if eq .KUBE_NAMESPACE .PROD_ENV }}
  name: {{ .APP_NAME }}
  {{ else if eq .KUBE_NAMESPACE .BRANCH_ENV }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
  {{ else }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}
  {{ end }}
spec:
  {{ if or (eq .KUBE_NAMESPACE .STG_ENV) (eq .KUBE_NAMESPACE .PROD_ENV) }}
  replicas: 2
  {{ else }}
  replicas: 1
  {{ end }}
  selector:
    matchLabels:
      {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
      name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
      {{ else }}
      name: {{ .APP_NAME }}
      {{ end }}
  template:
    metadata:
      labels:
        {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
        name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        app: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        service: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        {{ else }}
        name: {{ .APP_NAME }}
        app: {{ .APP_NAME }}
        service: {{ .APP_NAME }}
        {{ end }}
    spec:
      containers:
        - name: {{ .APP_NAME }}
          image: {{ .IMAGE_URL }}/{{ .IMAGE_REPO }}:{{.DRONE_COMMIT_SHA}}
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
          ports:
            - containerPort: 8080
          envFrom:
            - configMapRef:
                {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
                name: {{ .APP_NAME }}-configmap-{{ .DRONE_SOURCE_BRANCH }}
                {{ else }}
                name: {{ .APP_NAME }}-configmap
                {{ end }}
          env:
            - name: TZ
              value: Europe/London
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_HOST
              {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
              value: redis-{{ .DRONE_SOURCE_BRANCH }}
              {{ else }}
              value: redis
              {{ end }}
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: session-secret
                  key: token
            - name: KEYCLOAK_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client
                  key: secret
            - name: KEYCLOAK_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client
                  key: id
            - name: KEYCLOAK_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keycloak-user
                  key: username
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-user
                  key: password
            {{ if (eq .KUBE_NAMESPACE .BRANCH_ENV) }}
            - name: SQS_URL
              valueFrom:
                secretKeyRef:
                  name: sas-paf-branch-sqs-queue
                  key: sqs_url
            - name: ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: sas-paf-branch-sqs-queue
                  key: access_key_id
            - name: SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: sas-paf-branch-sqs-queue
                  key: secret_access_key
            {{ else if (eq .KUBE_NAMESPACE .UAT_ENV) }}
            - name: SQS_URL
              valueFrom:
                secretKeyRef:
                  name: sas-paf-uat-sqs-queue
                  key: sqs_url
            - name: ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: sas-paf-uat-sqs-queue
                  key: access_key_id
            - name: SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: sas-paf-uat-sqs-queue
                  key: secret_access_key
            {{ else if (eq .KUBE_NAMESPACE .PROD_ENV) }}
            - name: SQS_URL
              valueFrom:
                secretKeyRef:
                  name: sas-paf-sqs-queue
                  key: sqs_url
            - name: ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: sas-paf-sqs-queue
                  key: access_key_id
            - name: SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: sas-paf-sqs-queue
                  key: secret_access_key
            {{ end }}
            - name: FILE_VAULT_URL
            {{ if eq .KUBE_NAMESPACE .PROD_ENV }}
              value: https://fv-paf.sas.homeoffice.gov.uk/file
            {{ else if eq .KUBE_NAMESPACE .STG_ENV }}
              value: https://fv-paf.stg.sas.homeoffice.gov.uk/file
            {{ else if eq .KUBE_NAMESPACE .UAT_ENV }}
              value: https://fv-paf.uat.sas-notprod.homeoffice.gov.uk/file
            {{ else if eq .KUBE_NAMESPACE .BRANCH_ENV }}
              value: https://fv-{{ .DRONE_SOURCE_BRANCH }}.{{ .BRANCH_ENV }}.homeoffice.gov.uk/file
            {{ end }}
          {{ if not (eq .KUBE_NAMESPACE .BRANCH_ENV) }}
          livenessProbe:
            httpGet:
              path: /healthz/ping
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz/readiness
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 5
          {{ end }}
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "250m"
              memory: "512Mi"
          volumeMounts:
            - mountPath: /public
              name: public

        - name: nginx-proxy
          # nginx-proxy-govuk:v4
          image: quay.io/ukhomeofficedigital/nginx-proxy-govuk@sha256:4470064d0b1d20ae08c5fd85551576cb687f342a22d6cb456fda9b2c4ce8c8df
          resources:
            requests:
              memory: 20Mi
              cpu: 20m
            limits:
              cpu: 300m
              memory: 256Mi
          env:
            - name: PROXY_SERVICE_HOST
              value: 127.0.0.1
            - name: PROXY_SERVICE_PORT
              value: "8080"
            - name: ENABLE_UUID_PARAM
              value: "FALSE"
            - name: CLIENT_MAX_BODY_SIZE
              value: "200"
            - name: PORT_IN_HOST_HEADER
              value: "FALSE"
            - name: VERBOSE_ERROR_PAGES
              value: "TRUE"
            - name: EXTRA_NAXSI_RULES
              value: |-
                BasicRule wl:2,1000,1001,1002,1007,1008,1009,1010,1011,1013,1015,1101,1205,1314 "mz:BODY";
                BasicRule wl:0 "mz:$HEADERS_VAR:Cookie";
                BasicRule wl:1500 "mz:FILE_EXT";
            - name: ADD_NGINX_SERVER_CFG
              value: |-
                ssl_stapling on;
                ssl_stapling_verify off;
                ssl_certificate /certs/tls.crt;
                ssl_certificate_key /certs/tls.key;
                ssl_trusted_certificate /certs/tls.crt;
                add_header Cache-Control private;
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                location /public {
                  add_header Cache-Control max-age=86400;
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  alias /public;
                }
# {{ file .NGINX_SETTINGS | indent 12 }}
          ports:
            - containerPort: 10443
          volumeMounts:
            - mountPath: /public
              name: public
            - mountPath: /certs
              name: certs
              readOnly: true
            - name: bundle
              mountPath: /etc/ssl/certs
              readOnly: true
          securityContext:
            runAsNonRoot: true
      volumes:
        - name: public
          emptyDir: {}
        - name: certs
          secret:
            {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
            secretName: tls
            {{ else }}
            secretName: file-vault-cert
            {{ end }}
        - name: bundle
          configMap:
            name: bundle
